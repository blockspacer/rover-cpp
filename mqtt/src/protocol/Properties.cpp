//
// Created by Ivan Kishchenko on 29/09/2019.
//

#include "Properties.h"

#define ARRAY_SIZE(a) (sizeof(a) / sizeof(a[0]))

namespace mqtt {

    struct {
        PropertyCodes value;
        const char *name;
    } nameToString[] = {
            {MQTTPROPERTY_CODE_PAYLOAD_FORMAT_INDICATOR,           "PAYLOAD_FORMAT_INDICATOR"},
            {MQTTPROPERTY_CODE_MESSAGE_EXPIRY_INTERVAL,            "MESSAGE_EXPIRY_INTERVAL"},
            {MQTTPROPERTY_CODE_CONTENT_TYPE,                       "CONTENT_TYPE"},
            {MQTTPROPERTY_CODE_RESPONSE_TOPIC,                     "RESPONSE_TOPIC"},
            {MQTTPROPERTY_CODE_CORRELATION_DATA,                   "CORRELATION_DATA"},
            {MQTTPROPERTY_CODE_SUBSCRIPTION_IDENTIFIER,            "SUBSCRIPTION_IDENTIFIER"},
            {MQTTPROPERTY_CODE_SESSION_EXPIRY_INTERVAL,            "SESSION_EXPIRY_INTERVAL"},
            {MQTTPROPERTY_CODE_ASSIGNED_CLIENT_IDENTIFER,          "ASSIGNED_CLIENT_IDENTIFER"},
            {MQTTPROPERTY_CODE_SERVER_KEEP_ALIVE,                  "SERVER_KEEP_ALIVE"},
            {MQTTPROPERTY_CODE_AUTHENTICATION_METHOD,              "AUTHENTICATION_METHOD"},
            {MQTTPROPERTY_CODE_AUTHENTICATION_DATA,                "AUTHENTICATION_DATA"},
            {MQTTPROPERTY_CODE_REQUEST_PROBLEM_INFORMATION,        "REQUEST_PROBLEM_INFORMATION"},
            {MQTTPROPERTY_CODE_WILL_DELAY_INTERVAL,                "WILL_DELAY_INTERVAL"},
            {MQTTPROPERTY_CODE_REQUEST_RESPONSE_INFORMATION,       "REQUEST_RESPONSE_INFORMATION"},
            {MQTTPROPERTY_CODE_RESPONSE_INFORMATION,               "RESPONSE_INFORMATION"},
            {MQTTPROPERTY_CODE_SERVER_REFERENCE,                   "SERVER_REFERENCE"},
            {MQTTPROPERTY_CODE_REASON_STRING,                      "REASON_STRING"},
            {MQTTPROPERTY_CODE_RECEIVE_MAXIMUM,                    "RECEIVE_MAXIMUM"},
            {MQTTPROPERTY_CODE_TOPIC_ALIAS_MAXIMUM,                "TOPIC_ALIAS_MAXIMUM"},
            {MQTTPROPERTY_CODE_TOPIC_ALIAS,                        "TOPIC_ALIAS"},
            {MQTTPROPERTY_CODE_MAXIMUM_QOS,                        "MAXIMUM_QOS"},
            {MQTTPROPERTY_CODE_RETAIN_AVAILABLE,                   "RETAIN_AVAILABLE"},
            {MQTTPROPERTY_CODE_USER_PROPERTY,                      "USER_PROPERTY"},
            {MQTTPROPERTY_CODE_MAXIMUM_PACKET_SIZE,                "MAXIMUM_PACKET_SIZE"},
            {MQTTPROPERTY_CODE_WILDCARD_SUBSCRIPTION_AVAILABLE,    "WILDCARD_SUBSCRIPTION_AVAILABLE"},
            {MQTTPROPERTY_CODE_SUBSCRIPTION_IDENTIFIERS_AVAILABLE, "SUBSCRIPTION_IDENTIFIERS_AVAILABLE"},
            {MQTTPROPERTY_CODE_SHARED_SUBSCRIPTION_AVAILABLE,      "SHARED_SUBSCRIPTION_AVAILABLE"}
    };

    const char *PropertyName(PropertyCodes value) {
        for (auto &item : nameToString) {
            if (item.value == value) {
                return item.name;
            }
        }
        return nullptr;
    }

    static struct nameToType {
        enum PropertyCodes name;
        enum PropertyTypes type;
    } namesToTypes[] = {
            {MQTTPROPERTY_CODE_PAYLOAD_FORMAT_INDICATOR,           MQTTPROPERTY_TYPE_BYTE},
            {MQTTPROPERTY_CODE_MESSAGE_EXPIRY_INTERVAL,            MQTTPROPERTY_TYPE_FOUR_BYTE_INTEGER},
            {MQTTPROPERTY_CODE_CONTENT_TYPE,                       MQTTPROPERTY_TYPE_UTF_8_ENCODED_STRING},
            {MQTTPROPERTY_CODE_RESPONSE_TOPIC,                     MQTTPROPERTY_TYPE_UTF_8_ENCODED_STRING},
            {MQTTPROPERTY_CODE_CORRELATION_DATA,                   MQTTPROPERTY_TYPE_BINARY_DATA},
            {MQTTPROPERTY_CODE_SUBSCRIPTION_IDENTIFIER,            MQTTPROPERTY_TYPE_VARIABLE_BYTE_INTEGER},
            {MQTTPROPERTY_CODE_SESSION_EXPIRY_INTERVAL,            MQTTPROPERTY_TYPE_FOUR_BYTE_INTEGER},
            {MQTTPROPERTY_CODE_ASSIGNED_CLIENT_IDENTIFER,          MQTTPROPERTY_TYPE_UTF_8_ENCODED_STRING},
            {MQTTPROPERTY_CODE_SERVER_KEEP_ALIVE,                  MQTTPROPERTY_TYPE_TWO_BYTE_INTEGER},
            {MQTTPROPERTY_CODE_AUTHENTICATION_METHOD,              MQTTPROPERTY_TYPE_UTF_8_ENCODED_STRING},
            {MQTTPROPERTY_CODE_AUTHENTICATION_DATA,                MQTTPROPERTY_TYPE_BINARY_DATA},
            {MQTTPROPERTY_CODE_REQUEST_PROBLEM_INFORMATION,        MQTTPROPERTY_TYPE_BYTE},
            {MQTTPROPERTY_CODE_WILL_DELAY_INTERVAL,                MQTTPROPERTY_TYPE_FOUR_BYTE_INTEGER},
            {MQTTPROPERTY_CODE_REQUEST_RESPONSE_INFORMATION,       MQTTPROPERTY_TYPE_BYTE},
            {MQTTPROPERTY_CODE_RESPONSE_INFORMATION,               MQTTPROPERTY_TYPE_UTF_8_ENCODED_STRING},
            {MQTTPROPERTY_CODE_SERVER_REFERENCE,                   MQTTPROPERTY_TYPE_UTF_8_ENCODED_STRING},
            {MQTTPROPERTY_CODE_REASON_STRING,                      MQTTPROPERTY_TYPE_UTF_8_ENCODED_STRING},
            {MQTTPROPERTY_CODE_RECEIVE_MAXIMUM,                    MQTTPROPERTY_TYPE_TWO_BYTE_INTEGER},
            {MQTTPROPERTY_CODE_TOPIC_ALIAS_MAXIMUM,                MQTTPROPERTY_TYPE_TWO_BYTE_INTEGER},
            {MQTTPROPERTY_CODE_TOPIC_ALIAS,                        MQTTPROPERTY_TYPE_TWO_BYTE_INTEGER},
            {MQTTPROPERTY_CODE_MAXIMUM_QOS,                        MQTTPROPERTY_TYPE_BYTE},
            {MQTTPROPERTY_CODE_RETAIN_AVAILABLE,                   MQTTPROPERTY_TYPE_BYTE},
            {MQTTPROPERTY_CODE_USER_PROPERTY,                      MQTTPROPERTY_TYPE_UTF_8_STRING_PAIR},
            {MQTTPROPERTY_CODE_MAXIMUM_PACKET_SIZE,                MQTTPROPERTY_TYPE_FOUR_BYTE_INTEGER},
            {MQTTPROPERTY_CODE_WILDCARD_SUBSCRIPTION_AVAILABLE,    MQTTPROPERTY_TYPE_BYTE},
            {MQTTPROPERTY_CODE_SUBSCRIPTION_IDENTIFIERS_AVAILABLE, MQTTPROPERTY_TYPE_BYTE},
            {MQTTPROPERTY_CODE_SHARED_SUBSCRIPTION_AVAILABLE,      MQTTPROPERTY_TYPE_BYTE}
    };

    int PropertyType(PropertyCodes value) {
        int rc = -1;

        for (auto &item : namesToTypes) {
            if (item.name == value) {
                return item.type;
            }
        }

        return rc;
    }
}